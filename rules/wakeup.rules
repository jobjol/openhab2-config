import org.eclipse.smarthome.core.library.types.DecimalType
import org.eclipse.smarthome.model.script.actions.Timer
import org.openhab.core.library.types.*

var boolean mAlaramTriggered = false 
var int mCurrentDimLevel = 0
val String LOG = "WakeUp"
var Timer mWakeUpTimer = null
var Timer mDimmerTimer = null
var int mDimStep
var int mTimeStep
val int DEFAULT_DIM_STEP = 2
val int DEFAULT_TIME_STEP = 1

rule "WakeUpAlarmSwitchOn"
when
    Item WakeUpAlarmSwitch changed to ON
then
    if (WakeUpMinute.state == NULL || WakeUpHour.state == NULL) {
        logInfo(LOG, "WakeUpAlarmMinute or WakeUpAlarmHour not set, alarm not processed")
    } else {
      var int nowHour = now.getHourOfDay
      var int wakeUpHour = (WakeUpHour.state as DecimalType).intValue

      var int hours = 0
      val int hourDiff = wakeUpHour - nowHour 
      if (hourDiff >= 0) {
          hours = hourDiff
      } else {
          hours = 24 + wakeUpHour - nowHour
      }
      var int minutes = 0
      val int nowMinute = now.getMinuteOfHour
      val int wakeUpMinute =  (WakeUpMinute.state as DecimalType).intValue
      var int minuteDiff = wakeUpMinute - nowMinute
      if (minuteDiff >= 0) {
          minutes = minuteDiff
      } else {
          minutes = 60 + wakeUpMinute - nowMinute
         if (hourDiff == 0) {
              hours = 24
          }
         hours--
      }
      var int totalMinutes = Math.max(0, ((hours*60) + minutes) - 30)

      logInfo(LOG, "Alarm will be set for: " + totalMinutes + " minutes")
      logInfo(LOG, "Alarm: "  + hours + " h " + minutes + " min")
      WakeUpAlarmTriggered.sendCommand(OFF)
      if (mWakeUpTimer != null) {
          mWakeUpTimer.cancel
          mWakeUpTimer = null
      }
      mWakeUpTimer = createTimer(now.plusMinutes(totalMinutes), [|
                                         logInfo(LOG, "Alarm triggered! ")
                                         WakeUpAlarmTriggered.sendCommand(ON)
                                         mWakeUpTimer = null
                                         ])    
}
end

rule "WakeUpAlarmTriggeredOn"
when
    Item WakeUpAlarmTriggered changed to ON
then
   logInfo(LOG, "Alarm trigger starting to dim")
   if (WakeUpMusic.state == ON) {
      sendCommand(Sonos_Volume, 0)
      sendCommand(Sonos_Controller, PLAY)
   }
   mCurrentDimLevel = 0

//   if (WakeUpDimStep.state == NULL) {
//       logInfo(LOG, "Dimstep not defined using default")
//       mDimStep = DEFAULT_DIM_STEP
//   } else {
//       mDimStep =  (WakeUpDimStep.state as DecimalType).intValue
//   }

   mDimStep = 1
   
   if (WakeUpFadeTime.state == NULL) {
        logInfo(LOG, "Dimstep not defined using default")
        mTimeStep = DEFAULT_TIME_STEP 
   } else {
       mTimeStep = (60 * ((WakeUpFadeTime.state as DecimalType)) / 100).intValue
   }
   mDimmerTimer = createTimer(now.plusSeconds(mTimeStep), [|
     mCurrentDimLevel += mDimStep
     logInfo(LOG, "Dimming " + mCurrentDimLevel)
     if (mCurrentDimLevel >= 100) {
         logInfo(LOG,"Dimming is at its max, finished")
         mCurrentDimLevel = 100
     } else {
         logInfo(LOG, "Reschedule dimmer " + mTimeStep + " seconds")
         mDimmerTimer.reschedule(now.plusSeconds(mTimeStep))
     }
      var colorint = (99 - (mCurrentDimLevel / 3))
      var WakeUpMusicVolume = ((WakeUpMusicVolume.state as DecimalType ) / 100)
      var MusicVolume = (WakeUpMusicVolume * mCurrentDimLevel)
      logInfo(LOG, "Volume " + WakeUpMusicVolume)
      var bright = new PercentType(mCurrentDimLevel)
      var hue = new DecimalType(0)
      var sat = new PercentType(colorint)
      var HSBType light = new HSBType(hue,sat, bright)
      sendCommand(Light_Bedroom, bright)
      sendCommand(Light_Bedroom_Color, bright)
      if (WakeUpMusicFade.state == ON) {
        if (WakeUpMusic.state == ON) {
          sendCommand(Sonos_Volume, MusicVolume)
        }
      }

     if (mCurrentDimLevel == 100) {
          if (WakeUpMusicFade.state == OFF) {
               if (WakeUpMusic.state == ON) {
                  sendCommand(Sonos_Volume, WakeUpMusicVolume)
                }
           }
         WakeUpAlarmSwitch.sendCommand(OFF)
     }
    ])
end

rule "WakeUpAlarmSwitchOff"
when
    Item WakeUpAlarmSwitch changed to OFF
then
   logInfo(LOG, "Switch off wakeup")
   if (mDimmerTimer != null) {
       mDimmerTimer.cancel
       mDimmerTimer = null
   }
   if (mWakeUpTimer != null) {
       mWakeUpTimer.cancel
       mWakeUpTimer = null
   }
end

